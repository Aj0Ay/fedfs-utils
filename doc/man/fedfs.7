.\"@(#)fedfs.7"
.\"
.\" @file doc/man/fedfs.7
.\" @brief Introductory material for FedFS users
.\"

.\"
.\" Copyright 2011 Oracle.  All rights reserved.
.\"
.\" This file is part of fedfs-utils.
.\"
.\" fedfs-utils is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License version 2.0 as
.\" published by the Free Software Foundation.
.\"
.\" fedfs-utils is distributed in the hope that it will be useful, but
.\" WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License version 2.0 for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" version 2.0 along with fedfs-utils.  If not, see:
.\"
.\"	http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
.\"
.\"
.TH FEDFS 7 "@publication-date@"
.SH NAME
fedfs \- The Linux Federated File System implementation
.SH DESCRIPTION
RFC 5716 introduces the Federated File System (FedFS, for short).
FedFS is an extensible standardized mechanism
by which system administrators construct
a coherent namespace across multiple file servers using
.IR "file system referrals" .
.P
A file system referral is like a symbolic link
to another file system share,
but it is not visible to applications.
It behaves like an automounted directory where a new file system 
mount is done when an application first accesses that directory.
Today, file system referral mechanisms exist
in several standard network file system protocols.
.P
Thus FedFS does not require any change
to file system protocols or client implementations.
FedFS provides its namespace features using referral mechanisms
already built in to network file system protocols.
.P
As a result, FedFS provides network file system namespace configuration
to file system clients via network file systems themselves,
rather than via side-band protocols like NIS.
Clients automatically share a common view of the network file system namespace
with no need for individual configuration on each client.
.P
Currently, the Linux FedFS implementation supports only
NFS version 4 referrals.
More on NFS version 4 referrals can be found in RFC 3530.
FedFS may support other network file system protocols in the future.
.SH FEDFS DOMAIN OPERATION
A file system referral that is managed by FedFS is called a
.IR "FedFS junction" .
Junctions join multiple file server shares into a single coherent
FedFS namespace.
On FedFS-enabled Linux file servers, the
.BR rpc.fedfsd (8)
daemon creates and removes FedFS junctions.
.P
An independently administered FedFS namespace is referred to as a
.IR "FedFS domain" .
FedFS domains are file namespaces only;
they do not represent authentication or name-mapping realms, for example.
.P
Thus, FedFS-enabled file system clients and servers are not members
of any FedFS domain and do not have
.I "a priori"
knowledge of what FedFS domains exist.
FedFS-enabled clients assume their own DNS domain name is the local
FedFS domain name.
.P
The top-level directory of a FedFS domain is referred to as its
.IR "domain root" .
Domain roots typically contain nothing but FedFS junctions
and other directories.
Useful data is contained in other shares
which clients discover by following FedFS junctions
in the domain root directory.
.P
Although FedFS junctions are stored on file servers,
they are lightweight objects that contain little actual data.
The bulk of FedFS junction information in a FedFS domain
is stored on an LDAP server.
LDAP servers that store FedFS information are known as
.IR "namespace databases" ,
or NSDBs, for short.
.P
Any standard LDAP server can become an NSDB if it knows the FedFS schema
(the definitions of FedFS record types).
The Linux FedFS implementation is designed to work with NSDBs residing
on any standard LDAP server that use the standard FedFS schema
laid out in the FedFS NSDB draft.
.P
FedFS groups a set of directories in a server's physical file system namespace
into a single administrative unit called a
.IR fileset .
For NFS, a whole share might be considered a fileset.
A FedFS domain consists of nothing more than one or more filesets,
a domain root,
and junction information stored on an NSDB.
.P
To function as a FedFS fileset,
a set of directories must have a name unique in a FedFS domain,
and a set of locations where the file data is stored.
A FedFS
.I fileset name
is a UUID and an NSDB domainname and port.
A FedFS
.I fileset location
is an LDAP record that describes the location
(the server where it resides, and its export path)
of a copy of a fileset's data.
.P
A fileset, for example, can have multiple replicas.
Such a fileset has one FedFS fileset name,
and each replica of the fileset has an individual FedFS fileset location record.
.P
A FedFS junction, then, contains nothing more than a FedFS fileset name.
When a file server resolves a FedFS junction, it performs an LDAP
query against the NSDB named in the junction using the UUID named in the junction.
The NSDB returns location information stored in FedFS fileset location records
for that FedFS fileset name.
The file server returns this location information to its clients
via a file system referral.
.P
On Linux NFS file servers,
.BR rpc.mountd (8)
is the gateway through which the in-kernel NFS server performs
FedFS junction resolution.
.SS Discovering domain roots
As with other FedFS filesets,
copies of a domain root can exist on multiple file servers.
These copies are known as
.IR "domain root replicas" .
.P
Two types of domain root replicas are available in a FedFS domain:
read-only and read-write.
By default,
FedFS-enabled file system clients mount read-only replicas.
.P
Rather than using junctions and information in an NSDB,
clients locate replicas of a domain's root by looking for
DNS SRV records that advertise file servers exporting domain root replicas.
.P
Clients typically mount FedFS domain roots in a standard place so that
files residing in a FedFS domain appear at the same location in the
file namespace on all clients.
By convention, the top of the global FedFS namespace looks like this:
.RS
.sp
.RI / fstype / domainname
.sp
.RE
where
.I fstype
specifies a network file system protocol to use, and
.I domainname
specifies a FedFS domain.
Currently, the Linux FedFS implementation recognizes only
.B nfs4
as a valid fstype.
.P
If
.I domainname
begins with a dot (period),
the pathname refers to a read-write replica of the domain's root.
Otherwise, it refers to a read-only replica.
Note this means that the read-write replicas, and all parts of the
file system below them,
are visible at a different point in a client's name space
than are read-only replicas.
.SS Globally Useful Names
On FedFS-enabled Linux clients,
either the automounter, with a special program map, or the
.BR mount.fedfs (8)
command finds and mounts the root of a FedFS domain.
.P
Typically, FedFS clients mount the FedFS namespace so that FedFS
pathnames appear the same on all clients.
Such pathnames are referred to as
.IR "globally useful names" ,
since a globally useful name refers to exactly the same file object
on every client in a domain.
.P
For example, the FedFS globally useful name
.I /nfs4/example.net
would be mounted on a local directory on the client called
.I /nfs4/example.net
so that applications have the same view of the
.I example.net
domain namespace on all FedFS clients.
.P
The Linux
.BR mount.fedfs (8)
command can attach anywhere in the client's local file namespace
any directory in the FedFS namespace the client
has permission to access.
This can be useful to ensure local namespace compatibility in some cases,
or hide parts of the FedFS namespace for security purposes.
.P
However, it breaks cross-platform application interoperability
by presenting applications with multiple pathnames to the same file object.
Therefore it should be avoided.
.SS Mount option inheritance
When encountering a file system referral, the Linux client
treats it as a server-initiated mount request.
The referring server provides only a list of server names and export paths.
The mount options for this new mount are inherited from the new mount
pointâ€™s parent directory on the client.
.P
As applications proceed deeper into a domain's namespace,
they encounter both file sets to which they have
read-only access, and file sets to which they have read-write
access.
To allow the server to provide proper access to both types of file sets,
typically both domain root replica types are mounted read-write
on FedFS clients. 
All submounts of the domain root are then mounted read-write as well.
.P
For example, a domain root may contain an NFS version 4 referral to an
export containing user home directories.
The domain root is read-only,
but user home directories would not be very useful if they could not be
written to.
The file server continues to employ user credentials to limit access
as appropriate.
.P
File system clients follow file system referrals
as applications encounter them,
which is similar to how an automounter works.
Consider the initial mount of the domain root
as if you are mounting a single whole file system,
even though underneath, additional NFS mounts come and go as needed.
.SS Creating domain roots
For now, only NFS domain roots are considered.
FedFS domain roots contain very little data,
so it is safe to create them right under
.I /
on your FedFS-enabled Linux NFS file servers.
.P
FedFS domain roots use a standard export path name form.
FedFS-enabled file system clients need know only the hostname
of an NFS server that is exporting a domain root in order to mount it.
The export path of a read-only domain root replica
starts with the string "/.domainroot-"
followed by the FedFS domain name.
.P
For instance, the export path of the read-only domain root of the
.I example.net
domain would be
.IR /.domainroot-example.net .
After creating this directory on a FedFS-enabled
file server and making it world readable,
an entry in /etc/exports for this export might look like:
.RS
.sp
/.domainroot-example.net	*(ro)
.sp
.RE
At this point, if
.BR rpc.fedfs (8)
is running on this server,
FedFS junctions can be created in this directory
using the FedFS administrative client tools.
You can also add other objects that might be useful
at the top of a FedFS domain namespace, such as standard NFS referrals,
or files, like a terms-of-use document.
.P
To enable discovery of this domain root
by FedFS-enabled file system clients,
add a DNS SRV record to an appropriate authoritative DNS server.
If you created your domain root on the file server named
.IR foo.example.net ,
a record for the above domain root should be added to the DNS
server authoritative for the
.I example.net
domain.
Such a record might look like
.RS
.sp
 _nfs4._domainroot._tcp	IN SRV	0 0 2049	foo.example.net.
.RE
.SH SECURITY
Each host in a FedFS domain plays one or more of the following roles,
each of which have different security requirements.
.IP "\fINSDB server\fP"
LDAP server that contains FedFS domain information
.IP "\fIFedFS file server\fP"
stores data accessible via a FedFS domain name space
.IP "\fIFedFS client\fP"
accesses data in FedFS domain name spaces
.IP "\fIFedFS admin client\fP"
manages FedFS domain information
.P
The Linux FedFS implementation provides administrative tools
to manage FedFS fileset name and location records in an NSDB.
Junction resolution uses anonymous LDAP search requests, and
administration takes place via authenticated LDAP modification requests.
.P
File servers and administrative clients use clear-text or TLS encrypted
transports to perform junction lookups and administrative requests.
The Linux FedFS implementation provides tools for managing X.509
certificates required for LDAP over TLS.
Junction lookups are performed anonymously, but administrative
requests require LDAP authentication.
.P
FedFS junction objects are created on file servers
by a side-band RPC protocol called the
.IR "FedFS admin protocol" .
This protocol is separate from network file system protocols to allow
FedFS to work without any modification to network file system protocols.
The protocol uses RPCSEC GSS to authenticate or encrypt administrative requests.
.P
Since two separate protocols are involved
when administering junctions and filesets,
junctions are created on file servers and
registered with the domain's NSDB in two separate steps.
.SH SEE ALSO
.BR nsdbparams (8),
.BR fedfs-map-nfs4 (8),
.BR mount.fedfs (8),
.BR rpc.fedfsd (8),
.BR rpc.mountd (8),
.BR fedfs-create-junction (8),
.BR fedfs-create-replication (8),
.BR fedfs-delete-junction (8),
.BR fedfs-delete-replication (8),
.BR fedfs-get-limited-nsdb-params (8),
.BR fedfs-get-nsdb-params (8),
.BR fedfs-lookup-junction (8),
.BR fedfs-lookup-replication (8),
.BR fedfs-null (8),
.BR fedfs-set-nsdb-params (8),
.BR nsdb-annotate (8),
.BR nsdb-create-fsl (8),
.BR nsdb-create-fsn (8),
.BR nsdb-update-nci (8),
.BR nsdb-delete-fsl (8),
.BR nsdb-delete-fsn (8),
.BR nsdb-remove-nci (8),
.BR nsdb-describe (8),
.BR nsdb-list (8),
.BR nsdb-nces (8),
.BR nsdb-resolve-fsn (8),
.BR nsdb-update-fsl (8)
.sp
RFC 5716 for FedFS requirements and overview
.sp
RFC 3530 for a description of NFS version 4 referrals
.sp
RFC 4510 for an introduction to LDAP
.SH COLOPHON
This page is part of the fedfs-utils package.
A description of the project and information about reporting bugs
can be found at
.IR http://oss.oracle.com/projects/fedfs-utils .
.SH AUTHOR
Chuck Lever <chuck.lever@oracle.com>
