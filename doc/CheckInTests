
@file doc/CheckInTests
@brief Document check-in acceptance tests for fedfs-utils

Copyright 2011 Oracle.  All rights reserved.

This file is part of fedfs-utils.

fedfs-utils is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License version 2.0 as
published by the Free Software Foundation.

fedfs-utils is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License version 2.0 for more details.

You should have received a copy of the GNU General Public License
version 2.0 along with fedfs-utils.  If not, see:

	http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt


Submitting patches
------------------

fedfs-utils adopts much precedent set by Linux kernel developers:

  http://kernelnewbies.org/UpstreamMerge/SubmittingPatches

Especially:

 o  Use "diff -uprN"
 o  Carefully describe why the change is needed
 o  Separate logical changes
 o  No MIME, no links, no compression or attachments.  Just plain text e-mail
 o  Include "[PATCH]: " in the subject
 o  Sign your work -- sections 12, 13, and 14 -- these are key

See also Documentation/CodingStyle in the Linux kernel source tree.


Per-commit acceptance tests
---------------------------

This is basic stuff that's easy to run, and should be working for
bisecting to be useful.

 1.  "autogen.sh" and "configure" must run without error
 2.  "make" must complete without error; No new compiler warnings
 3.  "make doxy" must complete with no errors or warnings
 4.  "make distcheck" must complete without error
 5.  "git status" must produce no output on a clean tree

Note that to preserve bisectability, the tree must build after each
commit.

At some point:
 1.  Automated checking of C code style and white space must pass
 2.  fortify, sparse, or splint testing must pass
 3.  Automated unit tests must pass


Per-release
-----------

 1.  All acceptance tests must pass
 2.  Update README and/or release notes
 3.  Update package version in configure.ac
 4.  Update sonumber of shared libraries (as needed)
 5.  Create a commit for the release
 6.  Create a tag for the release commit
 7.  gc the git database and push the release
 8.  "make dist" and publish the tarball

